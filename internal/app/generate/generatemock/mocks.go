// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package generatemock

import (
	"context"

	"github.com/slok/sloth/internal/pluginengine/slo"
	mock "github.com/stretchr/testify/mock"
)

// NewSLOPluginGetter creates a new instance of SLOPluginGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSLOPluginGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *SLOPluginGetter {
	mock := &SLOPluginGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SLOPluginGetter is an autogenerated mock type for the SLOPluginGetter type
type SLOPluginGetter struct {
	mock.Mock
}

type SLOPluginGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *SLOPluginGetter) EXPECT() *SLOPluginGetter_Expecter {
	return &SLOPluginGetter_Expecter{mock: &_m.Mock}
}

// GetSLOPlugin provides a mock function for the type SLOPluginGetter
func (_mock *SLOPluginGetter) GetSLOPlugin(ctx context.Context, id string) (*slo.Plugin, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSLOPlugin")
	}

	var r0 *slo.Plugin
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*slo.Plugin, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *slo.Plugin); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slo.Plugin)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SLOPluginGetter_GetSLOPlugin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSLOPlugin'
type SLOPluginGetter_GetSLOPlugin_Call struct {
	*mock.Call
}

// GetSLOPlugin is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *SLOPluginGetter_Expecter) GetSLOPlugin(ctx interface{}, id interface{}) *SLOPluginGetter_GetSLOPlugin_Call {
	return &SLOPluginGetter_GetSLOPlugin_Call{Call: _e.mock.On("GetSLOPlugin", ctx, id)}
}

func (_c *SLOPluginGetter_GetSLOPlugin_Call) Run(run func(ctx context.Context, id string)) *SLOPluginGetter_GetSLOPlugin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SLOPluginGetter_GetSLOPlugin_Call) Return(plugin *slo.Plugin, err error) *SLOPluginGetter_GetSLOPlugin_Call {
	_c.Call.Return(plugin, err)
	return _c
}

func (_c *SLOPluginGetter_GetSLOPlugin_Call) RunAndReturn(run func(ctx context.Context, id string) (*slo.Plugin, error)) *SLOPluginGetter_GetSLOPlugin_Call {
	_c.Call.Return(run)
	return _c
}
