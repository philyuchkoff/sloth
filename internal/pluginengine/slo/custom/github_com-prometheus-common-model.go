// Code generated by 'yaegi extract github.com/prometheus/common/model'. DO NOT EDIT.

package custom

import (
	"github.com/prometheus/common/model"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/prometheus/common/model/model"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddressLabel":               reflect.ValueOf(constant.MakeFromLiteral("\"__address__\"", token.STRING, 0)),
		"AlertFiring":                reflect.ValueOf(model.AlertFiring),
		"AlertNameLabel":             reflect.ValueOf(constant.MakeFromLiteral("\"alertname\"", token.STRING, 0)),
		"AlertResolved":              reflect.ValueOf(model.AlertResolved),
		"AllowUTF8":                  reflect.ValueOf(constant.MakeFromLiteral("\"allow-utf-8\"", token.STRING, 0)),
		"BucketLabel":                reflect.ValueOf(constant.MakeFromLiteral("\"le\"", token.STRING, 0)),
		"DotsEscaping":               reflect.ValueOf(model.DotsEscaping),
		"Earliest":                   reflect.ValueOf(model.Earliest),
		"EscapeDots":                 reflect.ValueOf(constant.MakeFromLiteral("\"dots\"", token.STRING, 0)),
		"EscapeMetricFamily":         reflect.ValueOf(model.EscapeMetricFamily),
		"EscapeName":                 reflect.ValueOf(model.EscapeName),
		"EscapeUnderscores":          reflect.ValueOf(constant.MakeFromLiteral("\"underscores\"", token.STRING, 0)),
		"EscapeValues":               reflect.ValueOf(constant.MakeFromLiteral("\"values\"", token.STRING, 0)),
		"EscapingKey":                reflect.ValueOf(constant.MakeFromLiteral("\"escaping\"", token.STRING, 0)),
		"ExportedLabelPrefix":        reflect.ValueOf(constant.MakeFromLiteral("\"exported_\"", token.STRING, 0)),
		"FingerprintFromString":      reflect.ValueOf(model.FingerprintFromString),
		"InstanceLabel":              reflect.ValueOf(constant.MakeFromLiteral("\"instance\"", token.STRING, 0)),
		"IsValidLegacyMetricName":    reflect.ValueOf(model.IsValidLegacyMetricName),
		"IsValidMetricName":          reflect.ValueOf(model.IsValidMetricName),
		"JobLabel":                   reflect.ValueOf(constant.MakeFromLiteral("\"job\"", token.STRING, 0)),
		"LabelNameRE":                reflect.ValueOf(&model.LabelNameRE).Elem(),
		"LabelsToSignature":          reflect.ValueOf(model.LabelsToSignature),
		"Latest":                     reflect.ValueOf(model.Latest),
		"LegacyValidation":           reflect.ValueOf(model.LegacyValidation),
		"MetaLabelPrefix":            reflect.ValueOf(constant.MakeFromLiteral("\"__meta_\"", token.STRING, 0)),
		"MetricNameLabel":            reflect.ValueOf(constant.MakeFromLiteral("\"__name__\"", token.STRING, 0)),
		"MetricNameRE":               reflect.ValueOf(&model.MetricNameRE).Elem(),
		"MetricTypeCounter":          reflect.ValueOf(model.MetricTypeCounter),
		"MetricTypeGauge":            reflect.ValueOf(model.MetricTypeGauge),
		"MetricTypeGaugeHistogram":   reflect.ValueOf(model.MetricTypeGaugeHistogram),
		"MetricTypeHistogram":        reflect.ValueOf(model.MetricTypeHistogram),
		"MetricTypeInfo":             reflect.ValueOf(model.MetricTypeInfo),
		"MetricTypeLabel":            reflect.ValueOf(constant.MakeFromLiteral("\"__type__\"", token.STRING, 0)),
		"MetricTypeStateset":         reflect.ValueOf(model.MetricTypeStateset),
		"MetricTypeSummary":          reflect.ValueOf(model.MetricTypeSummary),
		"MetricTypeUnknown":          reflect.ValueOf(model.MetricTypeUnknown),
		"MetricUnitLabel":            reflect.ValueOf(constant.MakeFromLiteral("\"__unit__\"", token.STRING, 0)),
		"MetricsPathLabel":           reflect.ValueOf(constant.MakeFromLiteral("\"__metrics_path__\"", token.STRING, 0)),
		"NameEscapingScheme":         reflect.ValueOf(&model.NameEscapingScheme).Elem(),
		"NameValidationScheme":       reflect.ValueOf(&model.NameValidationScheme).Elem(),
		"NoEscaping":                 reflect.ValueOf(model.NoEscaping),
		"Now":                        reflect.ValueOf(model.Now),
		"ParamLabelPrefix":           reflect.ValueOf(constant.MakeFromLiteral("\"__param_\"", token.STRING, 0)),
		"ParseDuration":              reflect.ValueOf(model.ParseDuration),
		"ParseDurationAllowNegative": reflect.ValueOf(model.ParseDurationAllowNegative),
		"ParseFingerprint":           reflect.ValueOf(model.ParseFingerprint),
		"QuantileLabel":              reflect.ValueOf(constant.MakeFromLiteral("\"quantile\"", token.STRING, 0)),
		"ReservedLabelPrefix":        reflect.ValueOf(constant.MakeFromLiteral("\"__\"", token.STRING, 0)),
		"SchemeLabel":                reflect.ValueOf(constant.MakeFromLiteral("\"__scheme__\"", token.STRING, 0)),
		"ScrapeIntervalLabel":        reflect.ValueOf(constant.MakeFromLiteral("\"__scrape_interval__\"", token.STRING, 0)),
		"ScrapeTimeoutLabel":         reflect.ValueOf(constant.MakeFromLiteral("\"__scrape_timeout__\"", token.STRING, 0)),
		"SeparatorByte":              reflect.ValueOf(model.SeparatorByte),
		"SignatureForLabels":         reflect.ValueOf(model.SignatureForLabels),
		"SignatureWithoutLabels":     reflect.ValueOf(model.SignatureWithoutLabels),
		"TimeFromUnix":               reflect.ValueOf(model.TimeFromUnix),
		"TimeFromUnixNano":           reflect.ValueOf(model.TimeFromUnixNano),
		"TmpLabelPrefix":             reflect.ValueOf(constant.MakeFromLiteral("\"__tmp_\"", token.STRING, 0)),
		"ToEscapingScheme":           reflect.ValueOf(model.ToEscapingScheme),
		"UTF8Validation":             reflect.ValueOf(model.UTF8Validation),
		"UnderscoreEscaping":         reflect.ValueOf(model.UnderscoreEscaping),
		"UnescapeName":               reflect.ValueOf(model.UnescapeName),
		"UnsetValidation":            reflect.ValueOf(model.UnsetValidation),
		"ValMatrix":                  reflect.ValueOf(model.ValMatrix),
		"ValNone":                    reflect.ValueOf(model.ValNone),
		"ValScalar":                  reflect.ValueOf(model.ValScalar),
		"ValString":                  reflect.ValueOf(model.ValString),
		"ValVector":                  reflect.ValueOf(model.ValVector),
		"ValueEncodingEscaping":      reflect.ValueOf(model.ValueEncodingEscaping),
		"ZeroSample":                 reflect.ValueOf(&model.ZeroSample).Elem(),
		"ZeroSamplePair":             reflect.ValueOf(&model.ZeroSamplePair).Elem(),

		// type definitions
		"Alert":               reflect.ValueOf((*model.Alert)(nil)),
		"AlertStatus":         reflect.ValueOf((*model.AlertStatus)(nil)),
		"Alerts":              reflect.ValueOf((*model.Alerts)(nil)),
		"Duration":            reflect.ValueOf((*model.Duration)(nil)),
		"EscapingScheme":      reflect.ValueOf((*model.EscapingScheme)(nil)),
		"Fingerprint":         reflect.ValueOf((*model.Fingerprint)(nil)),
		"FingerprintSet":      reflect.ValueOf((*model.FingerprintSet)(nil)),
		"Fingerprints":        reflect.ValueOf((*model.Fingerprints)(nil)),
		"FloatString":         reflect.ValueOf((*model.FloatString)(nil)),
		"HistogramBucket":     reflect.ValueOf((*model.HistogramBucket)(nil)),
		"HistogramBuckets":    reflect.ValueOf((*model.HistogramBuckets)(nil)),
		"Interval":            reflect.ValueOf((*model.Interval)(nil)),
		"LabelName":           reflect.ValueOf((*model.LabelName)(nil)),
		"LabelNames":          reflect.ValueOf((*model.LabelNames)(nil)),
		"LabelPair":           reflect.ValueOf((*model.LabelPair)(nil)),
		"LabelPairs":          reflect.ValueOf((*model.LabelPairs)(nil)),
		"LabelSet":            reflect.ValueOf((*model.LabelSet)(nil)),
		"LabelValue":          reflect.ValueOf((*model.LabelValue)(nil)),
		"LabelValues":         reflect.ValueOf((*model.LabelValues)(nil)),
		"Matcher":             reflect.ValueOf((*model.Matcher)(nil)),
		"Matrix":              reflect.ValueOf((*model.Matrix)(nil)),
		"Metric":              reflect.ValueOf((*model.Metric)(nil)),
		"MetricType":          reflect.ValueOf((*model.MetricType)(nil)),
		"Sample":              reflect.ValueOf((*model.Sample)(nil)),
		"SampleHistogram":     reflect.ValueOf((*model.SampleHistogram)(nil)),
		"SampleHistogramPair": reflect.ValueOf((*model.SampleHistogramPair)(nil)),
		"SamplePair":          reflect.ValueOf((*model.SamplePair)(nil)),
		"SampleStream":        reflect.ValueOf((*model.SampleStream)(nil)),
		"SampleValue":         reflect.ValueOf((*model.SampleValue)(nil)),
		"Samples":             reflect.ValueOf((*model.Samples)(nil)),
		"Scalar":              reflect.ValueOf((*model.Scalar)(nil)),
		"Silence":             reflect.ValueOf((*model.Silence)(nil)),
		"String":              reflect.ValueOf((*model.String)(nil)),
		"Time":                reflect.ValueOf((*model.Time)(nil)),
		"ValidationScheme":    reflect.ValueOf((*model.ValidationScheme)(nil)),
		"Value":               reflect.ValueOf((*model.Value)(nil)),
		"ValueType":           reflect.ValueOf((*model.ValueType)(nil)),
		"Vector":              reflect.ValueOf((*model.Vector)(nil)),

		// interface wrapper definitions
		"_Value": reflect.ValueOf((*_github_com_prometheus_common_model_Value)(nil)),
	}
}

// _github_com_prometheus_common_model_Value is an interface wrapper for Value type
type _github_com_prometheus_common_model_Value struct {
	IValue  interface{}
	WString func() string
	WType   func() model.ValueType
}

func (W _github_com_prometheus_common_model_Value) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _github_com_prometheus_common_model_Value) Type() model.ValueType {
	return W.WType()
}
