// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1 "github.com/slok/sloth/pkg/kubernetes/api/sloth/v1"
	internal "github.com/slok/sloth/pkg/kubernetes/gen/applyconfiguration/internal"
	slothv1 "github.com/slok/sloth/pkg/kubernetes/gen/applyconfiguration/sloth/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=sloth.slok.dev, Version=v1
	case v1.SchemeGroupVersion.WithKind("Alert"):
		return &slothv1.AlertApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("Alerting"):
		return &slothv1.AlertingApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("PrometheusServiceLevel"):
		return &slothv1.PrometheusServiceLevelApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("PrometheusServiceLevelSpec"):
		return &slothv1.PrometheusServiceLevelSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("PrometheusServiceLevelStatus"):
		return &slothv1.PrometheusServiceLevelStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SLI"):
		return &slothv1.SLIApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SLIEvents"):
		return &slothv1.SLIEventsApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SLIPlugin"):
		return &slothv1.SLIPluginApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SLIRaw"):
		return &slothv1.SLIRawApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SLO"):
		return &slothv1.SLOApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SLOPlugin"):
		return &slothv1.SLOPluginApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SLOPlugins"):
		return &slothv1.SLOPluginsApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
